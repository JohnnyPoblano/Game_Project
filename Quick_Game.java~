public class Quick_Game{
 
  //For Quick game mode: Words between 2 and 4 letters long. 
  //The user has until one turn after the head, body, left and right arm, 
  //left and right leg are added to guess the word. That is 7 chances. 
 

  //Constants////////////////////////////////////////////////////////////////////////////////////////
  //Scoring Constants
  final static String GAME_TYPE = "Quick Play";
  final static int WON = 5;
  final static int LOST = 3;
  final static int LESS_THAN_2 = 20;
  final static int LESS_THAN_3 = 10;
  final static int LESS_THAN_4 = 5;
  
  final static int CORRECT_CONSONANT = 10;
  final static int CORRECT_VOWEL = 15;
  final static int CORRECT_SPECIAL = 30;
  
  //Guessing Constants
  final static int NUMBER_OF_GUESSES = 7;
  final static int GUESSES_MINUS_1 = 6;
  final static int GUESSES_MINUS_2 = 5;
  final static int GUESSES_MINUS_3 = 4;
  final static int GUESSES_MINUS_4 = 3;
  final static int GUESSES_MINUS_5 = 2;
  final static int GUESSES_MINUS_6 = 1;
  final static int ZERO_GUESSES = 0;
  
  //Word Length Constants
  final static int WORD_LENGTH_MIN = 2;
  final static int WORD_LENGTH_MAX = 4;
  
  final static String WORD_HOLDER = "_";
  
//__Hangman Display Constants________________________________________________________________________
  String[][] hangmanDisplay = {
      {" ", " ", " ", " ", " ", "_", "_", "_", " ", " "},
      {" ", " ", " ", " ", "|", " ", " ", " ", "|", " "},
      {" ", " ", " ", " ", "|", " ", " ", " ", "^", " "},
      {" ", " ", " ", " ", "|", " ", " ", " ", " ", " "},
      {" ", " ", " ", " ", "|", " ", " ", " ", " ", " "},
      {" ", " ", " ", " ", "|", " ", " ", " ", " ", " "},
      {" ", " ", " ", " ", "|", " ", " ", " ", " ", " "},
      {" ", " ", " ", " ", "|", " ", " ", " ", " ", " "},
      {"_", "_", "_", "_", "|", "_", "_", "_", "_", "_"},
    };
  
  String[] hangman1 = {" ", " ", " ", " ", "|", " ", " ", " ", "O", " "};//will switch with the 3rd index row
  String[] hangman2 = {" ", " ", " ", " ", "|", " ", " ", " ", "|", " "};//will switch with the 4th index row
  String[] hangman3 = {" ", " ", " ", " ", "|", " ", " ", "/", "|", " "};//will switch with the 4th index row
  String[] hangman4 = {" ", " ", " ", " ", "|", " ", " ", "/", "|", "\\"};//will switch with the 4th index row
  String[] hangman5 = {" ", " ", " ", " ", "|", " ", " ", "/ ", " ", " "};//will switch with the 5th index row
  String[] hangman6 = {" ", " ", " ", " ", "|", " ", " ", "/ ", "\\", ""};//will switch with the 5th index row
   
//__guessed Array, consonant array, vowel array, special letters array_______________________________
  String[] vowelArray = {"A", "E", "I", "O", "U"};
  String[] consonantArray = {"B", "C", "D", "F", "G", "H", "I", "J", "K", "L", "M", "N", "P", "R", "S", "T", "V", "W"};
  String[] specialLettersArray = {"Q", "X", "Y", "Z"};
  String[] guessedArray = new String[NUMBER_OF_GUESSES];
  String[] validLetters = {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"};

//__FIELDS___________________________________________________________________________________________
  private boolean won;
  private boolean correctGuess;
  private boolean correctVowel;
  private boolean correctConsonant;
  private boolean correctSpecial;
  private int score;
  // private int theme;
  private int guessChances;
  private String guess;
  private String userName;
  private boolean complete;
  //private int size = IR4.getRandomNumber(WORD_LENGTH_MIN, WORD_LENGTH_MAX);
  private int size = 3;
  private int wordListSize;
  
  WordList list = new WordList();
  String[] wordArray = new String[size];//This is where letters will be stored when the computer can no longer find words without them.
  boolean[] index = new boolean[3];//parallel to all indexes in the words. Sets each index to true/false if found.
  boolean[] wordMatchArray = new boolean[3];//paralell to wordList. Check true/false
//__CONSTRUCTOR______________________________________________________________________________________
  Quick_Game(int t, String name){
    won = false;
    correctGuess = false;
    correctVowel = false;
    correctConsonant = false;
    correctSpecial = false;
    score = 0;
    //theme = t;
    guessChances = NUMBER_OF_GUESSES;//will minus down with every guess
    guess = " ";
    userName = name;
    complete = false;   
    
    initializeGuessedArray();
    initializeThemeArray();
    //clean word array with size
    list.removeWords(size);
    list.displayList();
  }//end default constructor
 

  
 //__RUN GAME METHOD__________________________________________________________________________________
  public void runGame(){ 
    
    index = new boolean[size];
    wordMatchArray = new boolean[list.getSize()];
    
    initializeWordArray();
    displayGameIntro();
    
    while(guessChances > 0 && !won){
      displayHangman();
      displayWordArray();
      displayChances();
      
      setGuess(); 
      guessedArray[guessChances-1] = guess;
      
      theHangman();//this is the AI control method. Will tell the computer if the guess is correct or not.

      if(correctGuess){
        checkGuess();//this checks for consonant/vowel/special letter status
        calculateScore(); //this method uses the four booleans (correct, vowel, consonant, special) to calculate score
        findStaticWord();//Will put last guess into a permanent index
        initializeGuessedArray();
      }
      if(!correctGuess){
        guessChances--;
        updateHangman();//This updates the Hang Man display
      }//This should make it so the guessChances only goes down on incorrect guesses. 
    }//end guessChances while loop
    
    calculateFinalScore();
    if(won){ displayWon();}
    else{displayLost();}
  
    
    //Save score and other stats. 
    //return to main menu.
    
    
  }//end runGame

//__THEME ARRAY MANIPULATION METHODS_________________________________________________________________
  
  public void initializeThemeArray(){
    list.addWord("APP");
    list.addWord("SNAP");
    list.addWord("RAID");
    list.addWord("CAP");
    list.addWord("TOO");
    list.addWord("ZOO");
    list.addWord("TAPE");
    list.addWord("MAIN");
    list.addWord("TAME");
    list.addWord("LOSE");
    list.addWord("LAME");
    list.addWord("BAIT");
    list.addWord("NEW");
    list.addWord("NEWS");
    list.addWord("TO");
    list.addWord("AT");
    list.addWord("CAT");
    list.addWord("TAP");
    list.addWord("NO");
    list.addWord("YES");
    list.addWord("ZAP");
    list.addWord("BAIN");
    list.addWord("BANE");
    list.addWord("PUT");
    list.addWord("PUTT");
    list.addWord("BUT");
    list.addWord("BUTT");
  }//end initializeThemeArray
  
  
//__SETTERS__________________________________________________________________________________________
    public void setGuess(){
      String g = IR4.getString("Please enter your guess.");
      g = g.toUpperCase();
      while(validGuess(g)){
        System.err.println("That is not a valid guess. Please enter ONE letter.");
        g = IR4.getString("Please enter your guess.");
      }
      guess = g;
    }//end setGuess
    
    private boolean validGuess(String g){
      //true = invalid!
      if(g.length() > 1){ return true;}
      else{return false;}             
    }//end validGuess
    
//__GETTERS__________________________________________________________________________________________    
    public String getGuess(){
      return guess;
    }//end getGuess
    
    public int getScore(){
      return score;
    }//end getScore
    
//__METHODS__________________________________________________________________________________________
    
  //__DISPLAY METHODS________________________________________________________________________________
    private static void displayGameIntro(){
      System.out.println("*******************************************************************");
      System.out.println("       Welcome to the"+ GAME_TYPE +" Mode of The Honest Hangman!");
      System.out.println("   The rules are simple: When prompted, guess a single letter.");
      System.out.println("    You have "+NUMBER_OF_GUESSES+" chances to guess the word.");
      System.out.println("              Goal: Don't let the hangman hang.");
      System.out.println("*******************************************************************\n");
    }//end displayShortGameIntro
    
    private void displayHangman(){
      for(int r = 0; r<hangmanDisplay.length;r++){
        for(int c = 0; c<hangmanDisplay[0].length;c++){
          System.out.print(hangmanDisplay[r][c]);
        }
        System.out.println();
      }
    }//end displayHangMan
    
    private void displayWordArray(){
      for(int i = 0; i < wordArray.length; i++){
        System.out.print(" " + wordArray[i] + " ");
      }
      System.out.println(" ");
    }//end displayWordArray
    
    private void displayChances(){
      System.out.println("Total Guesses Left:" + guessChances);
    }//end displayChances
    
    private void displayWon(){
      System.out.println("Congratulations! You won!");
      System.out.println("You scored a total of " + score + " points.");
    }//end displayWon
    
    private void displayLost(){
      System.out.println("And the hangman is hung. You have lost.");
      System.out.println("You scored a total of " + score + " points.");
    }//end displayLost
    
//__THE HANGMAN______________________________________________________________________________________
    private void theHangman(){
       checkMatches();
      
      for(int i = 0; i < wordMatchArray.length; i++){
        if(wordMatchArray[i] = false){
          correctGuess = false;;
        }else{
          correctGuess = true;
        }
      }
      
      
    }//end theHangMan
    
    private void findStaticWord(){
    }//end findStaticWord
    
    private void checkMatches(){
      initializeIndexArray();
      for(int x = 0; x < list.getSize(); x++){
        for(int y = 0; y < index.length; y++){
          for(int z = 0; z < guessedArray.length; z++){
            if(wordArray[y].equals(WORD_HOLDER)){
              //list.getWord(x).charAt(y)
              if(guessedArray[z].equals(list.getWord(x).charAt(y))){
                index[y] = true;
              }
            }else{
              if(guessedArray[z].equals(wordArray[y])){
                index[y] = true;
              }
            }
          }
        }
        checkTotalIndexMatch();
        initializeIndexArray();
      }                                 
    }//end checkMatches
    
    private void checkTotalIndexMatch(){
      int count = 0;
      for(int x = 0; x < wordMatchArray.length; x++){
        for(int y = 0; y < index.length; y++){
          if(index[y] = true){
            count++;
          }
        }
        if(count == size){
          wordMatchArray[x] = true;
          count = 0;
        }else{
          count = 0;
        }
      }
    }//end checkTotalIndexMatch
    
    private void initializeIndexArray(){
      for(int i = 0; i<index.length;i++){
        index[i] = false;
      }
    }//end initializeIndexArray
      
        
//__CHECK GUESS______________________________________________________________________________________
    public void checkGuess(){
      checkForVowel();
      if(!correctVowel){
        checkForConsonant();
      }
      if(!correctVowel && !correctConsonant){
        checkForSpecial();
      }
      
    }//end checkGuess 
    
    private void checkForVowel(){
      for(int i = 0; i<vowelArray.length;i++){
        if(guess.equals(vowelArray[i])){correctVowel = true;}
      }
    }//end checkForVowel
    
    private void checkForConsonant(){
      for(int j = 0; j<consonantArray.length;j++){
        if(guess.equals(vowelArray[j])){correctConsonant = true;}
      }
    }//end checkForConsonant
    
    private void checkForSpecial(){
      for(int k = 0; k<specialLettersArray.length;k++){
        if(guess.equals(specialLettersArray[k])){ correctSpecial = true;}
      }
    }//end checkForSpecial
    
//__CALCULATE SCORE__________________________________________________________________________________
    private void calculateScore(){
      if(correctVowel){ score = score + CORRECT_VOWEL;}
      
      if(correctConsonant){ score = score + CORRECT_CONSONANT;}
      
      if(correctSpecial){ score = score + CORRECT_SPECIAL;}
      
    }//end calculateScore
    
    private void calculateFinalScore(){
      if(won){ score = score + WON;}
      else{ score = score + LOST;}
    }//end calculateFinalScore
    
//__UPDATING DISPLAYS________________________________________________________________________________
    private void updateHangman(){
      if(!correctGuess){
        
       if(guessChances == GUESSES_MINUS_1){
           //read hangman1 into the 3rd index row of hangmanDisplay
           int r = 3;
           for(int c = 0; c < hangmanDisplay[0].length; r++){
               hangmanDisplay[r][c] = hangman1[c];
           }
         }
         if(guessChances == GUESSES_MINUS_2){
           //read hangman2 into the 4th index row of hangmanDisplay
           int r = 4;
           for(int c = 0; c < hangmanDisplay[0].length; r++){
               hangmanDisplay[r][c] = hangman2[c];
           }
         }
         if(guessChances == GUESSES_MINUS_3){
           //read hangman3 into the 4th index row of hangmanDisplay
           int r = 4;
           for(int c = 0; c < hangmanDisplay[0].length; r++){
               hangmanDisplay[r][c] = hangman3[c];
           }
         }
         if(guessChances == GUESSES_MINUS_4){
           //read hangmand4 into the 4th index row of hangmanDisplay
           int r = 4;
           for(int c = 0; c < hangmanDisplay[0].length; r++){
               hangmanDisplay[r][c] = hangman4[c];
           }
         }
         if(guessChances == GUESSES_MINUS_5){
           //read hangman5 into the 5th index row of hangmanDisplay
           int r = 5;
           for(int c = 0; c < hangmanDisplay[0].length; r++){
               hangmanDisplay[r][c] = hangman5[c];
           }
         }
         if(guessChances == GUESSES_MINUS_6){
           //read hangman6 into the 5th index row of hangmanDisplay
           int r = 5;
           for(int c = 0; c < hangmanDisplay[0].length; r++){
               hangmanDisplay[r][c] = hangman6[c];
           }
         }
      }//update according to guessChances counter. Remember: It's backwards. 7 is good, 0 is bad.}
    }//end updateHangman
    
//__INITIALIZE ARRAYS________________________________________________________________________________
    private void initializeWordArray(){
      for(int i = 0; i < wordArray.length;i++){
        wordArray[i] = "_";
      }
    }//end initializeWordArray
    
    private void initializeGuessedArray(){
      for(int i = 0; i < guessedArray.length; i++){
        guessedArray[i] = " ";
      }
    }//end initializeGuessedArray

}//end Quick Game